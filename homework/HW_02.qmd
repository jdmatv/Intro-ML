---
title: "Homework 2"
format: html
---

__Due Date:__ 2022-10-16 at 8:30 AM PT
---


__Name:__ Joseph Matveyenko

__Date:__ `{julia} using Dates; today()`



For this assignment, you will practice downloadings, cleaning, and analyzing data from the [National Risk Index (NRI)](https://hazards.fema.gov/nri/) and the [CDC Social Vulnerability Index (SVI)](https://www.atsdr.cdc.gov/placeandhealth/svi/index.html).

## Preparation

1. Create a 'data' folder in the root directory of your repository.
1. Inside the 'data' folder, create a 'raw' folder.
1. Add and commit a '.gitignore' file to the root directory of this repository that excludes all contents of the 'data' folder.
1. Download the county-level NRI and SVI data for the entire United States. Place the data in the 'data/raw' folder.
1. In the repository README, provide a brief (1-2 sentence) description of each file in the 'data' folder and a link to the original source of the data.

## Task 1 - NRI Data Cleaning

__1. Import the NRI data. Ensure that the [FIPS code](https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code) variable ('STCOFIPS') is correctly identified as a string / character variable. Otherwise, the leading zeros will be removed.__

```{julia}
using Base.Filesystem
using DataFrames
using CSV

# set working dir to main
if basename(pwd()) == "homework" 
    cd(dirname(pwd()))
end

# ensure that 'STCOFIPS' is identified as a string
column_types = Dict(:STCOFIPS => String)

# import NRI CSV data
nri_dat = CSV.read("data/raw/NRI_Table_Counties.csv", types=column_types, DataFrame)
first(nri_dat, 3)
```

__2. Subset the NRI data to include only the 5-digit state/county FIPS code and all colums ending with '\_AFREQ' and '\_RISKR'. Each of these columns represents a different hazard type.__

```{julia}
# string endings
str_ends = ["_AFREQ", "_RISKR"]

# get columns to include
include_cols = ["STCOFIPS"; [i for i in names(nri_dat) if any(endswith(i, str) for str in str_ends)]]

#subsetting dataframe
nri_dat_subset = nri_dat[:, include_cols]
first(nri_dat_subset, 3)
```
__3. Create a table / dataframe that, for each hazard type, shows the number of missing values in the '\_AFREQ' and '\_RISKR' columns.__
```{julia}
# function to count missing values
function count_missing(df)
    return DataFrame(Column = names(df), MissingCount = [sum(ismissing, df[:, col]) for col in names(df)])
end

# create new dataframe by counting missing values
nri_dat_missing = count_missing(nri_dat_subset[:, 2:end])
first(nri_dat_missing, 5)
```
__4. Create a new column in the original data table indicating whether or not 'AVLN_AFREQ' is missing or observed. Show the cross-tabulation of the 'AVLN_AFREQ' missingness and 'AVLN_RISKR' columns (including missing values). What do you observe?__
```{julia}
using FreqTables

# create column AVLN_MISS that = 1 when AVLN_AFREQ missing
transform!(nri_dat_subset, :AVLN_AFREQ => ByRow(ismissing) => :AVLN_MISS)

# cross tabulation of AVLN_MISS and AVLN_RISK
freqtable(nri_dat_subset.AVLN_RISKR, nri_dat_subset.AVLN_MISS)
```

We observe that all instances when the variable `AVLN_AFREQ` is missing, `AVLN_RISKR` is coded as 'Not Applicable'.

__5. Assuming that a risk that is "not applicable" to a county has an annualized frequency of 0, impute the relevant missing values in the '\_AFREQ' columns with 0.__
```{julia}
# list of variables for which to impute missing values
imp_vars = [col for col in names(nri_dat_subset) if endswith(col, "_AFREQ")]
risk_vars = [col for col in names(nri_dat_subset) if endswith(col, "_RISKR")]
new_vars = [i * "_IMP" for i in imp_vars]


# assuming that NA means the freq is 0, imput missing values
impute_missing(x, y) = ifelse.(y .== "Not Applicable" .&& ismissing.(x), 0, x) 

for (iv, rv, nv) in zip(imp_vars, risk_vars, new_vars)
    transform!(nri_dat_subset, [Symbol(iv), Symbol(rv)] => impute_missing => Symbol(nv))
end

first(nri_dat_subset, 10)
```


## Task 2 - SVI Data Cleaning

__1. Import the SVI data. Ensure that the FIPS code is correctly identified as a string / character variable. Otherwise, the leading zeros will be removed.__
__1. Subset the SVI data to include only the following columns:__
`ST, STATE, ST_ABBR, STCNTY, COUNTY, FIPS, LOCATION, AREA_SQMI, E_TOTPOP, EP_POV150, EP_UNEMP, EP_HBURD, EP_NOHSDP, EP_UNINSUR, EP_AGE65, EP_AGE17, EP_DISABL, EP_SNGPNT, EP_LIMENG, EP_MINRTY, EP_MUNIT, EP_MOBILE, EP_CROWD, EP_NOVEH, EP_GROUPQ, EP_NOINT, EP_AFAM, EP_HISP, EP_ASIAN, EP_AIAN, EP_NHPI, EP_TWOMORE, EP_OTHERRACE`
```{julia}
# ensure that 'FIPS' is identified as a string
column_types = Dict(:FIPS => String)

# import SVI CSV data
svi_dat = CSV.read("data/raw/SVI_2022_US_county.csv", types=column_types, DataFrame)

# subset data to include given columns
given_columns_str = "ST, STATE, ST_ABBR, STCNTY, COUNTY, FIPS, LOCATION, AREA_SQMI, E_TOTPOP, EP_POV150, EP_UNEMP, EP_HBURD, EP_NOHSDP, EP_UNINSUR, EP_AGE65, EP_AGE17, EP_DISABL, EP_SNGPNT, EP_LIMENG, EP_MINRTY, EP_MUNIT, EP_MOBILE, EP_CROWD, EP_NOVEH, EP_GROUPQ, EP_NOINT, EP_AFAM, EP_HISP, EP_ASIAN, EP_AIAN, EP_NHPI, EP_TWOMORE, EP_OTHERRACE"
given_columns = strip.(split(given_columns_str, ","))
svi_dat_subset = svi_dat[:, given_columns]
first(svi_dat, 3)
```
__2. Create a table / dataframe that shows the number of missing values in each column.
(Hint: if you wrote a function for Task 1, you can reuse it here.)__

```{julia}
# reusing the function from part 1 to count missing values
svi_dat_missing = count_missing(svi_dat_subset)
first(svi_dat_missing, 5)
```

## Task 3 - Data Merging
__1. Identify any FIPS codes that are present in the NRI data but not in the SVI data and vice versa. Describe any discrepancies and possible causes? What to these discrepancies, if any, mean for interpreting results based on the merged dataset moving forward?__
```{julia}
# identify unique FIPS codes in both datasets
nri_fips = unique(nri_dat_subset.STCOFIPS)
svi_fips = unique(svi_dat_subset.FIPS)

# identify FIPS codes in NRI but not in SVI
nri_not_in_svi = setdiff(nri_fips, svi_fips)
println("In NRI but not in SVI: $nri_not_in_svi")

# identify FIPS codes in SVI but not in NRI
svi_not_in_nri = setdiff(svi_fips, nri_fips)
println("In SVI but not in NRI: $svi_not_in_nri")
```
There are discrepancies in the FIPS codes for Connecticut; both the NRI and SVI data contains data on Connecticut but may be using different FIPS code variants to represent the same counties. Additionally, the NRI data includes FIPS codes for American Somoa, Guam, the Northern Mariana Islands, Puerto Rico, and U.S. Virgin Islands, which are not present in the SVI data set. These discrepancies mean that it will likely not be possible to gain insight on the U.S. territories not covered in the SVI data through merging the two data sets. Further, the CT discrepancies should be reconciled prior to analysis.

__2. Merge the NRI and SVI data on the FIPS code. Use an outer join to keep all counties in the final dataset.__
```{julia}
# merging both datasets
merged_nri_svi = outerjoin(nri_dat_subset, svi_dat_subset, on = :STCOFIPS => :FIPS)
first(merged_nri_svi, 5)
```
__3. Create a table / dataframe that shows the number of missing values in each column of the merged dataset.__

```{julia}
# reusing the function from part 1 to count missing values
merged_nri_svi_missing = count_missing(merged_nri_svi)
first(merged_nri_svi_missing, 5)
```

## Task 4 - Data Analysis

__1. For each numerical variable in the merged dataset, plot a histogram showing the distribution of values.
(Hint: write a function to make the histogram for a single variable, then use a loop or apply function to make the histograms for all numerical variables.)__

```{julia}
using Plots
using RCall


# function to make histograms
function plot_hist(x, titles; bins=100)
    R"""
    for (i in 1:length($x)){
        hist(unlist($x[i]), breaks=100, main=$titles[i], xlab='Value')
    }
    """
end

# creating empty arrays for data to plot
plot_data = []
plot_titles = String[]
# iterate through each col of df
for i in names(merged_nri_svi)
    # remove missing values
    clean_col = collect(skipmissing(merged_nri_svi[:,Symbol(i)]))
    # check if numeric
    if eltype(clean_col)<:Number && !isempty(clean_col) && length(unique(clean_col))>5
        # adding data to arrays
        push!(plot_data, [round(x, digits=5) for x in clean_col if x isa Number])
        push!(plot_titles, i)
    end
end

# generating R plots
plot_hist(plot_data, plot_titles)
```
